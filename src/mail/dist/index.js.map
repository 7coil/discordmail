{"version":3,"sources":["Account.ts","Mail.ts","index.js"],"names":["sqlConnection","mysql","createConnection","host","user","password","database","query","server","SMTPServer","banner","authOptional","onData","stream","session","callback","then","mail","Mail","console","log","recipient","getRecipient","sendMail","catch","error","err","Error","responseCode","listen","on","message"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["import { Connection } from 'mysql';\nimport fetch from 'node-fetch';\nimport Mail from './Mail';\nimport FormData from 'form-data';\n\nenum AccountTypes {\n  WEBHOOK_ACCOUNT = 0,\n  USER_ACCOUNT = 1\n}\n\nclass Account {\n  id: string\n  type: AccountTypes\n  payload: string\n\n  constructor({\n    id, type, payload\n  }: {\n    id: string,\n    type: AccountTypes,\n    payload: string,\n  }) {\n    this.id = id;\n    this.type = type;\n    this.payload = payload;\n  }\n\n  sendMail(mail: Mail) {\n    if (this.type === AccountTypes.WEBHOOK_ACCOUNT) {\n      const form = new FormData();\n      form.append('payload_json', JSON.stringify(mail.getEmbed()));\n\n      fetch(this.payload, {\n        method: 'POST',\n        body: form\n      })\n    }\n  }\n\n  static getAccountFromEmail(db: Connection, email: string): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      const lowercaseEmailString = email.toLowerCase();\n\n      if (!lowercaseEmailString.endsWith('@' + process.env.DOMAIN_NAME)) return resolve(null);\n      \n      const remainingPart = email.substring(0, email.length - process.env.DOMAIN_NAME.length - 1);\n\n      db.query('SELECT * FROM accounts WHERE id = ?', [remainingPart], (err, results, fields) => {\n        if (err) {\n          reject(err);\n        } else {\n          if (results.length === 0) return resolve(null);\n          return resolve(new Account(results[0]))\n        }\n      })\n    })\n  }\n}\n\nexport default Account\n","import { ParsedMail } from 'mailparser';\nimport { SMTPServerDataStream, SMTPServerSession } from 'smtp-server';\nimport { Connection } from 'mysql';\nimport Account from './Account';\nimport htmlToText from 'html-to-text';\n\nclass Mail {\n  mailObject: ParsedMail;\n  stream: SMTPServerDataStream;\n  session: SMTPServerSession;\n  callback: (err: Error) => void;\n  sqlConnection: Connection\n  dateLoaded: Date;\n\n  constructor({\n    mail,\n    stream,\n    session,\n    callback,\n    sqlConnection,\n  }: {\n    mail: ParsedMail,\n    stream: SMTPServerDataStream,\n    session: SMTPServerSession,\n    callback: (err: Error) => void,\n    sqlConnection: Connection\n  }) {\n    this.mailObject = mail;\n    this.stream = stream;\n    this.session = session;\n    this.callback = callback;\n    this.sqlConnection = sqlConnection;\n    this.dateLoaded = new Date();\n  }\n\n  /**\n   * Check if the email requires conversion from HTML to Plain Text.\n   */\n  contentRequiresConversion(): boolean {\n    if (this.mailObject.text) return false;\n    if (this.mailObject.html) return true;\n    return false;\n  }\n\n  contentRequiresTruncation(): boolean {\n    if (this.getContents() === null) return false;\n    return this.getContents().length > 2000;\n  }\n\n  emailContainsAttachments(): boolean {\n    return this.mailObject.attachments.length > 0;\n  }\n\n  getRecipient(): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      const emails = [];\n\n      if (this.mailObject.to) emails.push(...this.mailObject.to.value.map(email => email.address))\n      if (this.mailObject.headers.get('x-forwarded-to')) emails.push(this.mailObject.headers.get('x-forwarded-to'))\n      if (this.session.envelope.rcptTo.length > 0) emails.push(...this.session.envelope.rcptTo.map(email => email.address))\n\n      Promise.all(emails.map(email => Account.getAccountFromEmail(this.sqlConnection, email)))\n        .then((results) => {\n          const accounts = results.filter(acc => !!acc);\n\n          resolve(accounts[0] || null)\n        })\n    })\n  }\n\n  /**\n   * Get the title of the email\n   */\n  getTitle(): string {\n    return this.mailObject.subject || '_Untitled E-Mail_'\n  }\n\n  getAuthor(): string {\n    if (!this.mailObject.from) return '_No Author Identified_'\n    if (this.mailObject.from.text.length > 256) return this.mailObject.from.text.substring(0, 250) + '...';\n    return this.mailObject.from.text\n  }\n\n  /**\n   * Get the plaintext contents of the file\n   */\n  getContents(): string {\n    if (this.contentRequiresConversion()) {\n      if (this.mailObject.html === false) return null\n      return htmlToText.fromString(this.mailObject.html)\n    } else {\n      if (this.mailObject.text.trim().length === 0) return null\n      return this.mailObject.text;\n    }\n  }\n\n  getTruncatedContents(): string {\n    if (this.contentRequiresTruncation()) return this.getContents().substring(0, 1995) + '...';\n    return this.getContents();\n  }\n\n  /**\n   * Get the date of when the email was sent (or arrived)\n   */\n  getDate(): Date {\n    return this.mailObject.date || this.dateLoaded;\n  }\n\n  getEmbed() {\n    const fields = [];\n\n    if (this.contentRequiresConversion()) {\n      fields.push({\n        name: 'Note',\n        value: 'This email has been converted from _HTML_ to _Plain Text_.'\n      })\n    }\n\n    if (this.contentRequiresTruncation()) {\n      fields.push({\n        name: 'Note',\n        value: 'This email has been truncated to fit under 2000 characters.'\n      })\n    }\n\n    if (this.emailContainsAttachments()) {\n      fields.push({\n        name: 'Attachments',\n        value: 'This email contains attachments.'\n      })\n    }\n\n    return {\n      title: this.getTitle(),\n      description: this.getTruncatedContents(),\n      timestamp: this.getDate(),\n      author: {\n        name: this.getAuthor()\n      },\n      fields,\n      footer: {\n        text: 'https://discordmail.com/'\n      }\n    }\n  }\n}\n\nexport default Mail\n","import { SMTPServer } from \"smtp-server\";\nimport { simpleParser } from \"mailparser\";\nimport mysql from 'mysql';\nimport Mail from \"./Mail\";\n\nconst sqlConnection = mysql.createConnection({\n  host: 'database',\n  user: 'discordmail',\n  password: 'discordmail',\n  database: 'discordmail'\n})\n\nsqlConnection.query(`\n  CREATE TABLE IF NOT EXISTS accounts (\n    id          VARCHAR(512)  PRIMARY KEY,\n    type        TINYINT(1)     NOT NULL,\n    payload     VARCHAR(512)  NOT NULL\n  );\n`);\n\n// Types\n// Webhook: 0\n// Account: 1\nsqlConnection.query(`\n  REPLACE INTO accounts (id, type, payload) VALUES ('test', 0, 'https://canary.discordapp.com/api/webhooks/697945595025031208/8nHYS-Pv_VJy1hZQsLei9PpPJ7UNNgOFiLXb9pNwmLjpSL0ogc4fNPbff0yItlq5N-h2')\n`)\n\nconst server = new SMTPServer({\n  banner: 'DiscordMail 2.0',\n  authOptional: true,\n  onData(stream, session, callback) {\n    simpleParser(stream)\n      .then(mail => new Mail({ mail, stream, session, callback, sqlConnection }))\n      .then(async (mail) => {\n        console.log(mail, recipient)\n        const recipient = await mail.getRecipient();\n        if (recipient) return recipient.sendMail(mail);\n        return;\n      })\n      .then(() => callback())\n      .catch((error) => {\n        let err;\n        if (error instanceof Error) {\n          err = error;\n        } else {\n          err = new Error(error);\n        }\n        err.responseCode = 552;\n        \n        console.log(err);\n        callback(err);\n      })\n  }\n});\n\nserver.listen(25);\nserver.on('error', (err) => {\n  console.log(err.message);\n});\n"]}